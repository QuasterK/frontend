{"version":3,"sources":["components/Authors.js","components/Stats.js","App.js","reducers/AuthorsReducer.js","reducers/StatsReducer.js","reducers/CalcSum.js","reducers/ActiveAuthorsReducer.js","saga.js","store.js","index.js"],"names":["Authors","showListOfAuthors","getAuthors","_this","props","chooseAuthor","id","name","_this$props","getStats","increaseNumOfAuthors","calc","deactivate","deleteAuthorFromList","deactivateAllButton","then","handleReset","reset","showChosenAuthors","_this2","this","_this$props2","authorsArray","active","chosenAuthor","showAuthors","map","author","i","react_default","a","createElement","key","className","onClick","Component","connect","state","authors","numOfAuthors","chosenAuthors","dispatch","type","Promise","resolve","increase","chosen","del","Stats","getNumOfAuthors","shouldCalcSum","createArrayOfWords","calcSumBoolean","sumWords","createNextAuthorsWords","getSumOfWords","words","newSum","newAuthorsWords","getWordsNextAuthor","prevSum","Object","keys","filter","stats","arrayOfStats","push","defineProperty","num","showStats","elem","value","values","Math","random","wordsNextAuthor","wordsSum","obj","App","components_Authors","components_Stats","initState","AuthorsReducer","arguments","length","undefined","action","objectSpread","newAuthorsArray","hasOwnProperty","newNum","toConsumableArray","concat","StatsReducer","CalcSum","ActiveAuthorsReducer","fetchAuthors","fetchStats","mySaga","rootSaga","regenerator_default","wrap","_context","prev","next","fetch","response","json","sent","put","t0","message","stop","_marked","newStats","_context2","res","_marked2","_context3","takeLatest","_marked3","_context4","all","_marked4","sagaMiddleware","createSagaMiddleware","appReducer","combineReducers","store","createStore","applyMiddleware","run","ReactDOM","render","es","BrowserRouter","Route","path","component","document","getElementById"],"mappings":"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","file":"static/js/main.148c9292.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport '../scss/Authors.scss';\n\nclass Authors extends Component {\n\n    showListOfAuthors = () => {\n        const {getAuthors} = this.props;\n        //send req to api to get list of authors\n        getAuthors();\n    };\n\n    chooseAuthor = (id, name) => {\n        const {getStats, increaseNumOfAuthors, calc, chooseAuthor, deactivate, deleteAuthorFromList, deactivateAllButton} = this.props;\n        //send id to fetch data from api\n        getStats(id)\n            //increasing number of chosen authors\n            .then(() => increaseNumOfAuthors(1))\n            //sending info that req calculate sum of words\n            .then(() => calc(true))\n            //adding name of chosen author to array\n            .then(() => chooseAuthor(name))\n            //deactivate chosen author button\n            .then(() => {\n                if(name === 'All Authors'){\n                    deactivate(false)\n                }else{\n                    deleteAuthorFromList(name);\n                    deactivateAllButton('All Authors')\n                }\n            })\n    };\n\n    //reset selected options and restore initial states\n    handleReset = () => {\n        const {reset} = this.props;\n        reset(false);\n    };\n    render() {\n\n        const {authorsArray, active, chosenAuthor} = this.props;\n        //array of object with name and key\n        let authors = authorsArray;\n        //creating array of authors to choose\n        let showAuthors = authors.map( (author,i) => {\n            return (\n                <div key={i} className={active === true ? 'author' : 'deactivate'} onClick={() => {this.chooseAuthor(author.key, author.name)}}>\n                    {author.name}\n                </div>\n            )\n        });\n        let chosenAuthors = chosenAuthor;\n        let showChosenAuthors;\n        if(chosenAuthor !== null) {\n           showChosenAuthors = chosenAuthors.map((author, i) => {\n                return <div key={i} className='chosenAuthor'>{author}</div>\n            })\n        }\n        return (\n            <div className='authors-container'>\n                <div>\n                    <div className='button' onClick={this.showListOfAuthors}>List of Authors</div>\n                    <div className='Authors'>\n                        {showAuthors}\n                    </div>\n                </div>\n                <div>\n                    <div className='chosenAuthors'>chosen authors : </div>\n                    <div>\n                        {showChosenAuthors}\n                    </div>\n                </div>\n                <div>\n                <div className='resetButton' onClick={this.handleReset}>RESET ALL</div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) =>{\n    return {\n        authorsArray: state.authors.authorsArray,\n        numOfAuthors: state.authors.numOfAuthors,\n        chosenAuthor: state.authors.chosenAuthors,\n        active: state.active.active,\n\n    }\n};\n\nconst mapDispatchToState = dispatch =>{\n    return {\n        getAuthors: () => {\n            (dispatch({type:'GET_AUTHORS'}));\n            return Promise.resolve()\n        },\n        getStats: (id) => {\n            (dispatch({type:'GET_STATS', id}));\n            return Promise.resolve()\n        },\n        calc: (calc) =>{\n            dispatch({type: 'CALC_SUM', calc})\n        },\n        increaseNumOfAuthors: (increase) => {\n            (dispatch({type:'INCREASE_NUM_OF_AUTHORS', increase}));\n            return Promise.resolve()\n        },\n        chooseAuthor: (chosen) => {\n            (dispatch({type:'CHOOSE_AUTHOR', chosen}));\n            return Promise.resolve()\n        },\n        reset: () => {\n            dispatch({type: \"RESET\"})},\n        deactivate: (active) => {\n            dispatch({type: \"ACTIVATE\", active});\n            return Promise.resolve()\n        },\n        deactivateAllButton: (deactivate) => {\n            dispatch({type: \"DEACTIVATE_ALL_BUTTON\", deactivate});\n            return Promise.resolve()\n        },\n        deleteAuthorFromList: (del) => {\n            dispatch({type: \"DELETE_AUTHOR_FROM_LIST\", del});\n            return Promise.resolve()\n        },\n    }\n};\nexport default connect(mapStateToProps, mapDispatchToState)(Authors);","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport '../scss/Stats.scss';\n\nclass Stats extends Component {\n    componentWillUpdate(){\n        const {getNumOfAuthors, shouldCalcSum, createArrayOfWords, getStats, calcSumBoolean, sumWords, createNextAuthorsWords, getSumOfWords} = this.props;\n        //creating array of words used by author and calculate sum of words used by more than one author\n        if (getNumOfAuthors > 0) {\n            if (getNumOfAuthors === 1 && shouldCalcSum === true) {\n                createArrayOfWords(getStats.words)\n                    .then(() => calcSumBoolean(false))\n                    .then(() => sumWords(getStats.words))\n            }\n            //chosen more than one author\n            if(getNumOfAuthors > 1 && shouldCalcSum === true) {\n                let newSum = {};\n\n                createNextAuthorsWords(getStats.words)\n                    .then(() => {\n                        let newAuthorsWords = this.props.getWordsNextAuthor;\n                        let prevSum = getSumOfWords;\n\n                        // eslint-disable-next-line\n                        const filter = Object.keys(prevSum)\n                            .filter(key => {\n                                return newSum[key] = prevSum[key] + newAuthorsWords[key]\n                            });\n                    })\n                    .then(this.props.calcSumBoolean(false))\n                    .then(() => this.props.sumWords(newSum))\n            }\n        }\n    }\n    render() {\n        const {getSumOfWords} = this.props;\n        //creating array of words used by chosen authors, to display them in table\n        let stats = getSumOfWords;\n        let arrayOfStats =[];\n        for(let key in stats){\n            arrayOfStats.push({[key]: stats[key]})\n        }\n\n        let num =0;\n        let showStats = arrayOfStats.map(elem => {\n            let key = Object.keys(elem);\n            let value = Object.values(elem);\n            num++;\n            return <tr key={Math.random()}>\n                <td>{num}</td>\n                <td>{key}</td>\n                <td>{value}</td>\n            </tr>\n        });\n        return (\n            <div>\n                <div className='Stats'>\n                    <table>\n                        <thead>\n                        <tr>\n                            <td/>\n                            <td>WORDS</td>\n                            <td>COUNT</td>\n                        </tr>\n                        </thead>\n                        <tbody>\n                             {showStats}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        getStats: state.stats.stats,\n        getNumOfAuthors: state.authors.numOfAuthors,\n        getWordsNextAuthor: state.stats.wordsNextAuthor,\n        getSumOfWords: state.stats.wordsSum,\n        shouldCalcSum: state.calc.calc\n    }\n};\n\nconst mapDispatchToState = dispatch => {\n    return {\n        //create array of words used by first author\n        createArrayOfWords: (words) => {\n            dispatch({type: 'CREATE_ARRAY_OF_WORDS', obj: words});\n            return Promise.resolve()\n        },\n        //array of words used by second and next author, necessary to calculate sum of words\n        createNextAuthorsWords: (words) => {\n            dispatch({type: 'CREATE_NEXT_ARRAY_OF_WORDS', words: words});\n            return Promise.resolve()\n        },\n        //sum of words used by authors\n        sumWords: (words) => {\n            dispatch({type: 'SUM_WORDS', words: words});\n            return Promise.resolve()\n        },\n        //boolean to check if client chosen another author\n        calcSumBoolean: (calc) => {\n            dispatch({type: 'CALC_SUM', calc});\n        }\n\n    }\n};\nexport default connect(mapStateToProps, mapDispatchToState)(Stats);","import React, { Component } from 'react';\nimport './App.css';\nimport Authors from './components/Authors';\nimport Stats from './components/Stats';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Authors/>\n        <Stats/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const initState = {\n    authors: {},\n    authorsArray: [],\n    numOfAuthors: 0,\n    chosenAuthors: null,\n};\n\nconst AuthorsReducer = (state = initState, action) => {\n    switch (action.type) {\n        case 'GET_AUTHORS':\n            return {\n                ...state,\n            };\n        case 'AUTHOR_FETCH_SUCCEEDED':\n\n            //creating new object with authors\n            let authors = action.getAuthors;\n            //adding to list of authors all\n            let newAuthorsArray = [{name: 'All Authors', key: ''}];\n            //create new array of authors including 'all'\n            for (let key in authors) {\n                if (authors.hasOwnProperty(key)) {\n                    newAuthorsArray.push({\n                        name: authors[key],\n                        key: key,\n                    })\n                }\n            }\n            return {\n                ...state,\n                authors: authors,\n                authorsArray:newAuthorsArray,\n            };\n        case 'INCREASE_NUM_OF_AUTHORS':{\n            let prevNum = state.numOfAuthors;\n            let newNum = prevNum + action.increase;\n            return{\n                ...state,\n                numOfAuthors: newNum\n            }\n        }\n        case 'CHOOSE_AUTHOR':{\n            return{\n                ...state,\n                chosenAuthors: state.chosenAuthors === null ? [action.chosen] : [...state.chosenAuthors,action.chosen]\n            }\n        }\n        case 'DEACTIVATE_ALL_BUTTON':{\n            //used in case, when client choose one of authors\n            let authors = state.authorsArray;\n            let newAuthorsArray = authors.filter( author => {\n                return action.deactivate !== author.name\n            });\n            return{\n                ...state,\n                authorsArray: newAuthorsArray,\n            }\n        }\n        case 'DELETE_AUTHOR_FROM_LIST':{\n            //delete chosen author from array\n            let authors = state.authorsArray;\n            let newAuthorsArray = authors.filter( author => {\n                return action.del !== author.name\n            });\n            return{\n                ...state,\n                authorsArray: newAuthorsArray,\n            }\n        }\n        default:\n            return state;\n    }\n\n};\n\nexport default AuthorsReducer;","const initState = {\n    //object with name and words\n    stats: [],\n\n    //words used by first author\n    words: [],\n    //words used by second and next authors\n    wordsNextAuthor: [],\n    //sum of words used by all selected authors\n    wordsSum: [],\n\n\n};\n\nconst StatsReducer = (state = initState, action) => {\n    switch (action.type) {\n        case 'GET_STATS':\n            return {\n                ...state,\n            };\n        case 'STATS_FETCH_SUCCEEDED':\n            //get stats for chosen author\n            let stats = action.getStats;\n            return {\n                ...state,\n                stats: stats,\n            };\n        case 'CREATE_ARRAY_OF_WORDS':{\n            return{\n                ...state,\n                words: action.obj,\n\n            }\n        }\n        case 'CREATE_NEXT_ARRAY_OF_WORDS':{\n            return{\n                ...state,\n                wordsNextAuthor: action.words\n            }\n        }\n        case 'SUM_WORDS':{\n            return{\n                ...state,\n                wordsSum: action.words\n            }\n        }\n        default:\n            return state;\n    }\n\n};\n\nexport default StatsReducer;","const initState = {\n    calc: false,\n};\n\nconst CalcSum = (state = initState, action) => {\n    switch (action.type) {\n        case 'CALC_SUM':\n            return {\n                calc: action.calc,\n            };\n        default:\n            return state;\n    }\n\n};\n\nexport default CalcSum;","const initState = {\n    active: true,\n};\n\nconst ActiveAuthorsReducer = (state = initState, action) =>{\n    if(action.type === 'ACTIVATE'){\n      return{\n          ...state,\n          active: action.active\n      }\n    }\n    return state\n};\n\nexport default ActiveAuthorsReducer;","import { put, all, takeLatest } from 'redux-saga/effects'\n\n// worker Saga: will be fired on USER_FETCH_REQUESTED actions\nfunction* fetchAuthors() {\n    try {\n        const authors = yield fetch('http://127.0.0.1:8080/authors')\n            .then(response => response.json())\n\n        yield put({type: \"AUTHOR_FETCH_SUCCEEDED\", getAuthors: authors});\n    } catch (e) {\n        yield put({type: \"AUTHOR_FETCH_FAILED\", message: e.message});\n    }\n}\nfunction* fetchStats(id) {\n    try{\n        const stats = yield fetch(`http://127.0.0.1:8080/stats/${id.id}`)\n            .then(res => res.json())\n        const newStats = {\n            name: id.id,\n            words: stats\n        };\n        yield put({type:'STATS_FETCH_SUCCEEDED', getStats: newStats})\n    } catch (e) {\n        yield put({type: 'STATS_FETCH_FAILED', message: e.message})\n    }\n}\nfunction* mySaga() {\n    yield takeLatest(\"GET_AUTHORS\", fetchAuthors);\n    yield takeLatest('GET_STATS', fetchStats);\n}\n\nexport default function* rootSaga(){\n    yield all([\n        mySaga(),\n    ])\n}","import {createStore, combineReducers, applyMiddleware} from 'redux';\n\n// import saga middleware\nimport createSagaMiddleware from 'redux-saga';\n\n//import reducers\nimport AuthorsReducer from './reducers/AuthorsReducer';\nimport StatsReducer from './reducers/StatsReducer';\nimport CalcSum from './reducers/CalcSum';\nimport ActiveAuthorsReducer from './reducers/ActiveAuthorsReducer';\n\n//import saga\nimport rootSaga from'./saga'\n\n//initialize saga middleware\nconst sagaMiddleware = createSagaMiddleware();\n\n//initialize combineReducers\nconst appReducer = combineReducers({\n    authors: AuthorsReducer,\n    stats: StatsReducer,\n    calc: CalcSum,\n    active: ActiveAuthorsReducer,\n});\n\n//restore initial state\nconst rootReducer = (state, action) => {\n    if (action.type === 'RESET') {\n        state = undefined\n    }\n\n    return appReducer(state, action)\n};\n\n//create store\nconst store = createStore(\n    rootReducer,\n    applyMiddleware(sagaMiddleware),\n);\n//run saga\nsagaMiddleware.run(rootSaga);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from 'react-redux';\nimport store from './store';\nimport {BrowserRouter, Route} from 'react-router-dom';\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <Route path = '/stats' component={App}/>\n        </BrowserRouter>\n    </Provider>,\n\n    document.getElementById('root'));\n\n"],"sourceRoot":""}